#!/usr/bin/env bash

help_text='
This script pulls the description of the current merge request (based on the current branch),
stores it in a temporary file and opens it in $EDITOR.
After the editor exists, the content of the file is uploaded as the new description
of the merge request.
Currently, the markdown description is converted to ORG before editing and converted back
before it is uploaded to Gitlab.
The script looks for a file "editmrrc" in the current directory and all parent directories
up to the root directory. It must exist and contain the gitlab path of the current project
as a single string, e.g.: mygroup/myproject or myusername/myproject

Author: remolueoend

Dependencies:
* graphqul: https://github.com/hasura/graphqurl
* jq
* pandoc (for converting descriptions to ORG)

Variables:
EDITOR: The editor to be used. Needs to block until closed (e.g. "emacs", "vim", ...)
GRAPHQL_TOKEN: your personal access token. Can be generated via profile page on gitlab.com
DEBUG: when set, xtrace is activated.

Usage:
GRAPHQL_TOKEN=<your_token> [DEBUG=1] editmr
'

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
   echo "$help_text"
   exit 1
fi

set -e

if [ -n "${DEBUG}" ]; then
    set -o xtrace
fi

if [ ! -n "${GRAPHQL_TOKEN}" ]; then
    echo "missing GRAPHQL_TOKEN. Create an access token in your gitlab profile."
    exit 1
fi


function get_rc_path() {
    # Searches for a 'editmrrc' file in the current folder
    # and upwards. Returns the absolute path of the file when found.
    local rc_path="$(pwd)/editmrrc"
    if [[ ! -f "$rc_path" ]]; then
        local rc_path=$(pwd)
        while [ "$rc_path" != "/" ] ; do
            local rc_path=`dirname "$rc_path"`
            if [ $(find "$rc_path" -maxdepth 1 -name editmrrc) ]; then
                echo "$rc_path/editmrrc"
                return
            fi

        done
    else
        echo "$rc_path"
    fi
}

function get_MR() {
    # Returns a JSON string describing the merge request of the given project
    # and with the given ID.
    #
    # $1: project path
    # $2 branch name of merge request

    local query='query getCurrentMR($project_path: ID!, $branch_name: String!) {
      project(fullPath: $project_path) {
        id
        mergeRequests(sourceBranches: [$branch_name]) {
          nodes {
            iid
            description
          }
        }
      }
    }'

    gq "https://gitlab.com/api/graphql" \
       -H "Authorization: Bearer $GRAPHQL_TOKEN" \
       -H "Content-Type: application/json" \
       -q "$query" \
       -v "project_path=$1" \
       -v "branch_name=$2"
}





function update_MR() {
    # Updates the description of an MR in the given project and with the given ID.
    #
    # $1 project_path
    # $2 MR IID
    # #3 new description

    local mutation='mutation upate_mr($project_path: ID!, $iid: String!, $desc: String) {
      mergeRequestUpdate(input: {
        projectPath: $project_path,
        description: $desc,
        iid: $iid
      }) {
        mergeRequest {
          description
        }
      }
    }'

    gq "https://gitlab.com/api/graphql" \
            -H "Authorization: Bearer $GRAPHQL_TOKEN" \
            -H "Content-Type: application/json" \
            -q "$mutation" \
            -v "project_path=$1" \
            -v "iid=\"$2\"" \
            -v "desc=$3"
}




curr_branch=$(git branch --show-current)
rc_path=$(get_rc_path)
curr_proj_path="$(cat $rc_path)"

curr_mr=$(get_MR "$curr_proj_path" "$curr_branch")
mr_iid=$(echo $curr_mr | jq -r '.data.project.mergeRequests.nodes[0].iid')
mr_desc=$(echo $curr_mr | jq -r '.data.project.mergeRequests.nodes[0].description')
org_desc=$(echo "$mr_desc" | pandoc -f markdown -t org)
target_dir="/tmp/editmr/$curr_proj_path"
target_file="$target_dir/$(basename $mr_iid).org"
mkdir -p $target_dir
echo "$org_desc" >| $target_file

$EDITOR $target_file

new_org_desc="$(cat $target_file)"
if [[ "$new_org_desc" != "$org_desc" ]]; then
    new_md_desc=$(echo "$new_org_desc" | pandoc -f org -t markdown)
    echo $(update_MR "$curr_proj_path" "$mr_iid" "$new_md_desc")
else
    echo "no changes detected"
fi




