#!/usr/bin/env bash

# Author: remolueoend
#
# Executes a command with its arguments in a new shell instance
# where a GNU pass entry has been sourced before.
# The GNU pass entry is sourced - make sure you trust your credentials and export everything you need!
#
# This allows you to e.g. save credentials as environment variables in a pass entry
# and start the desired command via this script:
# // ~/.password-store/my-command.gpg:
# export MY_VAR=foo # export is important!
#
# // my-command:
# echo $MY_VAR $1
#
# // prints 'foo bar':
# with-secure-env my-command bar
#
#
# The path of the pass file to source is calculated as follows:
# 1. if `WITH_SECRET_ENV_FILE` is set:
#    It is expected to contain the path to the pass entry and is directly forwarded to pass show.
# 2. if `WITH_SECRET_ENV_DIR` is set:
#    its value is prepended to the name of the executable and passed to pass show.
#    This allows you to e.g. use different credentials in different directories for the same tools.
# 3. if none of the above variables are set, the script looks for a pass entry with the exact name of the executable.
#

if [[ $# -eq 0 ]]; then
    echo "invalid arguments. Usage: [WITH_SECRET_ENV_FILE=<pass_file>] with-secret-env <EXEC> [..EXEC_ARGS]"
    exit 1
fi

exec_path=$1
if [[ $WITH_SECRET_ENV_FILE != "" ]]; then
    file_name="$WITH_SECRET_ENV_FILE"
elif [[ $WITH_SECRET_ENV_DIR != "" ]]; then
    file_name="$WITH_SECRET_ENV_DIR/$(basename $1)"
else
    file_name="$(basename $1)"
fi

vars=$(pass show $file_name)
eval "$vars"
exec $exec_path "${@:2}" 
