#!/usr/bin/env sh

# Author: remolueoend <remolueoend@users.noreply.github.com>
#
# Description:
# Query and copy or print passwords from 1Password interactively using dmenupass and rofi.
# This script can be directly assigned to a system keybinding to access 1Password items from anywhere.
# To store active 1Password session tokens securely, this script makes use of secret-tool to store them
# in the user's local key chain.
#
# Dependencies:
# op             The 1Password CLI binary used to access the user's data
# secret-tool    Used to store and retrieve 1Password session tokens securely
# jq             Helper binary for parsing 1Password API responses
# xsel           Used to copy passwords to the clipboard
# notify-send    Small helper to display progress notifications
# dmenupass      dmenu extension for interactive password input
#
# This script is part of: https://github.com/remolueoend/voidrice



# asks the user for their 1pass keyphrase and signs them in. Additionally, stores the session token in the users keyring
# and returns it.
login () {
    local token=$(dmenupass "enter 1Password keyphrase:" | xargs | op signin my --raw)
    echo "$token" | secret-tool store --label "1password cli session token" "x-app" "1password-cli" "x-type" "session-token"
    echo "$token"
}

# returns a previously persisted session token from the user's keyring.
# returns nothing if no token was found.
retrieve_token () {
    secret-tool lookup "x-app" "1password-cli" "x-type" "session-token"
}

# requests and returns all items from the remote vault.
#
# arg $1: a valid 1password session token
#
# returns: JSON-formatted array of items
get_items () {
    OP_SESSION_my="$1" op list items
}

# requests and returns the details of a single item.
#
# arg $1: a valid 1password session token
# arg $2: the UUID of the item to fetch
#
# returns: JSON-formatted object of the fetched item
get_item_details () {
    OP_SESSION_my="$1" op get item "$2"
}

# returns the main password for a given item, based on its template type.
#
# arg $1: JSON-formatted item object. Use `get_item_details` to fetch it.
get_item_pw () {
    case $(echo "$1" | jq -r '.templateUuid') in
        "001")
            # logins
            echo "$1" | jq -r '.details.fields[] | select(.type=="P").value'
            ;;
        "006")
            # documents
            echo "$1" | jq -r '.details.sections[].fields[] | select(.t=="Password").v' 
            ;;
        "110")
            # servers
            echo "$1" | jq -r '.details.sections[].fields[] | select(.t=="password").v' 
            ;;
        *)
            echo "unknown template type."
            exit 11
            ;;
    esac
}

if [[ $1 == "-h" || "$1" == "--help" ]]; then
    echo -e "Query and copy or print passwords from 1Password interactively.\\n"
    echo -e "Usage: rofi-1password [COMMAND], where COMMAND is one of:"
    echo -e "\\tprint-item\\tpretty-prints all details of a selected item"
    echo -e "\\tprint\\t\\tprints the password to stdout\\n"
    echo -e "By default (i.e. no command), this tool copies the password of the selected item to the system clipboard"
    echo -e "After 10 seconds, the clipboard is cleared again."
    exit 0
fi

token=$(retrieve_token)
# if fetching items fails: login and retry:
if ! items=$(get_items "$token"); then
    token=$(login)
    items=$(get_items "$token")
fi

item_names=$(echo "$items" | jq -r '.[].overview.title')
selected_index=$(echo "$item_names" | rofi -dmenu -i -format d)
selected_id=$(echo "$items" | jq -r --arg idx $selected_index '.[$idx | tonumber - 1].uuid')

item_details=$(get_item_details "$token" "$selected_id")

if [[ $1 == "print-item" ]]; then
    echo "$item_details" | jq
    exit 0
fi

password=$(get_item_pw "$item_details")

if [[ $1 == "print" ]]; then
    echo $password
    exit 0
fi

echo "$password" | tr -d '\n' | xsel -bi
item_title=$(echo "$item_details" | jq '.overview.title')
notify-send "rofi-1password" "password for $item_title copied to clipboard"

# start a forked and delayed process to clear the clipboard after a given timeout:
(sleep 10; echo "" | tr -d '\n' | xsel -bi;) &
