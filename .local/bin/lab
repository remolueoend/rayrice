#!/usr/bin/env sh

# AUTHOR       : github.com/remolueoend
# DESCRIPTION  : Script for managing jupyter lab servers.
# DEPENDENCIES : xdg-open jupyter awk jq


# call `lab` to print help/usage message.
usage="Manage jupyter lab servers. Usage:\n
    \tstart [dir=CWD]\tstarts a jupyter server at the given directory or opens the UI of an already running server
    \tstop  [dir]\tstops all running servers or only the one running at the provided directory path
    \tlist\t\tlists all running jupyter servers\n"

ip=0.0.0.0
cwd=$(pwd -P)

# returns the absolute path of a given path.
# returns the current working directory if no path was provided
#
# [$1] the path to resolve
function resolve_with_def_cwd()
{
    if [ -z "$1" ]; then
        echo $cwd
    else
        echo $(readlink -f "$1")
    fi
}

# prints a raw list of running servers. Returns nothing if no server is running.
function get_running_servers()
{
    jupyter notebook list | tail -n +2 | awk -F" :: " '{ print($2"\t"$1) }'
}

# Returns the URL of the jupyter server running in the given working directory.
# Returns nothing if no server was found.
#
# $1 the working directory of the server
function get_dir_url()
{
    get_running_servers | awk -v wd="$1" -F"\t" '{ if($1==wd){print $2} }'
}

# start a jupyter server in the given directory (default is current working directory).
# if there is already a server running, the URL of the server is opened instead.
#
# [$1=$cwd] working directory of the server
function start()
{
    wd=$(resolve_with_def_cwd "$1")
    url=$(get_dir_url $wd)
    if [ -z "$url" ]; then
        echo "starting server at $wd"
        jupyter lab --ip=$ip "$wd" 1>/dev/null 2>/dev/null &
    else
        echo "found running server, opening URL"
        xdg-open $url
    fi
}

# stops all running jupyter servers.
function stop_all()
{
    echo "stopping all running jupyter servers..."
    while IFS= read -r line; do
        port=$(echo "$line" | jq '.port')
        jupyter notebook stop $port
    done <<< "$(jupyter notebook list --json)"
}

# stops a jupyter server running at the given directory path.
#
# $1: directory path of the server
function stop()
{
    echo "stopping jupyter server at $1..."
    port=$(jupyter notebook list --json | jq --arg DIR "$1" 'select(.notebook_dir == $DIR).port')
    if [ -z "$port" ]; then
        echo "no server seems to be running at $1"
    else
        jupyter notebook stop $port
    fi
}

# prints a list of currently running servers
function print_running_servers()
{
    list=$(get_running_servers)
    if [ -z "$list" ]; then
        echo "no server running"
    else
        echo "$list"
    fi
}

case "$1" in
    start)
        start "$2"
        ;;
    stop)
        if [ -z "$2" ]; then
            stop_all
        else
            stop $(readlink -f $2)
        fi
        ;;
    list)
        print_running_servers

        ;;
    *)
        echo -e "$usage"
esac
